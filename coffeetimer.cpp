#include <cstdio>
#include <cstdlib>
#include <cassert>

#include "platform.h"
#include "utility.h"

bool debugEvents = true;
bool debugStates = true;
bool debugTimers = true;

enum {
    STATE_DARK,
    STATE_EDIT,
    STATE_STATUS,
    STATE_WAITING,
    STATE_RUNNING,
    STATE_PAUSED,
    STATE_ALARM,
} appState = STATE_DARK;

// time spent in each state

#if 0
// Testing
constexpr int waitingToDarkDuration = 100;
constexpr int button1TimerDuration = 50;
constexpr int button2TimerDuration = 100;
constexpr int alarmToWaitingDuration = 100;
constexpr int pausedToWaitingDuration = 100;
constexpr int statusToWaitingDuration = 100;
constexpr int editToWaitingDuration = 100;
#else
// Production
constexpr int waitingToDarkDuration = 5 * 60 * 10;
constexpr int button1TimerDuration = 1 * 60 * 10;
constexpr int button2TimerDuration = 4 * 60 * 10;
constexpr int alarmToWaitingDuration = 5 * 60 * 10;
constexpr int pausedToWaitingDuration = 5 * 60 * 10;
constexpr int statusToWaitingDuration = 1 * 60 * 10;
constexpr int editToWaitingDuration = 1 * 60 * 10;
#endif

struct Rect2Di {
    int left;
    int top;
    int width;
    int height;
};

constexpr int fontWidth = 8;
constexpr int fontHeight = 16;

constexpr Rect2Di timeDisplayArea{fontWidth * 2, 2 * fontHeight, 128 - fontWidth * 4, 128 - 2 * fontHeight - 2 * fontHeight};
constexpr Rect2Di button1DisplayArea{fontWidth, 8, 128 - fontWidth * 2, fontHeight};
constexpr Rect2Di button2DisplayArea{fontWidth, 128 - fontHeight - 8, 128 - fontWidth * 2, fontHeight};

void DisplayString(const char *str)
{
    DrawText(timeDisplayArea.left + timeDisplayArea.width / 2, timeDisplayArea.top + timeDisplayArea.height / 2, str, JUSTIFY_CENTER, JUSTIFY_CENTER, Color(255, 255, 255), Color(0, 0, 0));
}

void DisplayTimeRemaining(int seconds)
{
    char timestring[6];
    sprintf(timestring, "%02d:%02d", seconds / 60, seconds % 60);
    DisplayString(timestring);
}

void DisplayOnButton(int button, const char *str)
{
    if(button == 1) {
        DrawText(button1DisplayArea.left, button1DisplayArea.top, str, JUSTIFY_LEFT, JUSTIFY_TOP, Color(255, 255, 255), Color(0, 0, 0));
    } else {
        DrawText(button2DisplayArea.left, button2DisplayArea.top, str, JUSTIFY_LEFT, JUSTIFY_TOP, Color(255, 255, 255), Color(0, 0, 0));
    }
}


// ----------------------------------------------------------------------------
// Dark state, screen off, low power

void EnterDarkState()
{
    if(debugStates) printf("EnterDarkState\n");
    SetScreen(false);
    appState = STATE_DARK;
}


// ----------------------------------------------------------------------------
// Waiting state, nothing going on, waiting for a button press

int waitingTimer;

void EnterWaitingState()
{
    if(debugStates) printf("EnterWaitingState\n");
    SetScreen(true);
    DrawRect(timeDisplayArea.left, timeDisplayArea.top, timeDisplayArea.width, timeDisplayArea.height, Color(0, 0, 0));
    DrawRect(button1DisplayArea.left, button1DisplayArea.top, button1DisplayArea.width, button1DisplayArea.height, Color(0, 0, 0));
    DrawRect(button2DisplayArea.left, button2DisplayArea.top, button2DisplayArea.width, button2DisplayArea.height, Color(0, 0, 0));
    DisplayOnButton(1, "1m");
    DisplayOnButton(2, "4m");
    DisplayString("Press Button\nTo Left\n");
    waitingTimer = StartTimer(waitingToDarkDuration);
    if(debugTimers) printf("waitingTimer = %d\n", waitingTimer);
    appState = STATE_WAITING;
}

void UpdateWaitingState()
{
    // show current time, show an animation, something
}

void ExitWaitingState()
{
    CancelTimer(waitingTimer); waitingTimer = -1;
}

// ----------------------------------------------------------------------------
// Edit and start a custom timer

int editWaitTimer;
int customTimerDuration;

void EnterEditState(int which)
{
    if(debugStates) printf("EnterEditState\n");
    customTimerDuration = (which == 0) ? button1TimerDuration : button2TimerDuration;
    DrawRect(timeDisplayArea.left, timeDisplayArea.top, timeDisplayArea.width, timeDisplayArea.height, Color(0, 0, 0));
    DrawRect(button1DisplayArea.left, button1DisplayArea.top, button1DisplayArea.width, button1DisplayArea.height, Color(0, 0, 0));
    DrawRect(button2DisplayArea.left, button2DisplayArea.top, button2DisplayArea.width, button2DisplayArea.height, Color(0, 0, 0));
    DisplayOnButton(1, "+5s");
    DisplayOnButton(2, "-5s");
    DisplayTimeRemaining(customTimerDuration);
    editWaitTimer = StartTimer(editToWaitingDuration);
    if(debugTimers) printf("editWaitTimer = %d\n", editWaitTimer);
    appState = STATE_EDIT;
}

void UpdateEditState()
{
    // if(GetTimerRemaining(editWaitTimer) % 10 >= 5) {
        DisplayTimeRemaining(customTimerDuration / 10);
    // } else {
        // DisplayString("--:--");
    // }
}

void ExitEditState()
{
    CancelTimer(editWaitTimer); editWaitTimer = -1;
}

// ----------------------------------------------------------------------------
// Status state, voltage, ...?
// Is there a point to this?  There should be a low-battery gauge on the display.
// Maybe it shows the actual values read at the ADC?

int statusTimer;

void EnterStatusState()
{
    if(debugStates) printf("EnterStatusState\n");
    appState = STATE_STATUS;
    DrawRect(timeDisplayArea.left, timeDisplayArea.top, timeDisplayArea.width, timeDisplayArea.height, Color(0, 0, 0));
    DrawRect(button1DisplayArea.left, button1DisplayArea.top, button1DisplayArea.width, button1DisplayArea.height, Color(0, 0, 0));
    DrawRect(button2DisplayArea.left, button2DisplayArea.top, button2DisplayArea.width, button2DisplayArea.height, Color(0, 0, 0));
    DisplayOnButton(1, "Done");
    DisplayOnButton(2, "Done");
    statusTimer = StartTimer(statusToWaitingDuration);
    if(debugTimers) printf("waitingTimer = %d\n", waitingTimer);
}

void UpdateStatusState()
{
    char voltageString[16];
    sprintf(voltageString, "%4.2f", BatteryMillivolts() / 1000.0f);
    DisplayString(voltageString);
}

void CancelStatusState()
{
    CancelTimer(statusTimer); statusTimer = -1;
}


// ----------------------------------------------------------------------------
// Running state, timers counting down

int runningTimer;

void EnterRunningState(int tenths)
{
    if(debugStates) printf("EnterRunningState\n");
    runningTimer = StartTimer(tenths);
    if(debugTimers) printf("runningTimer = %d\n", runningTimer);
    appState = STATE_RUNNING;
    DrawRect(timeDisplayArea.left, timeDisplayArea.top, timeDisplayArea.width, timeDisplayArea.height, Color(0, 0, 0));
    DrawRect(button1DisplayArea.left, button1DisplayArea.top, button1DisplayArea.width, button1DisplayArea.height, Color(0, 0, 0));
    DrawRect(button2DisplayArea.left, button2DisplayArea.top, button2DisplayArea.width, button2DisplayArea.height, Color(0, 0, 0));
    DisplayOnButton(1, "Pause");
    DisplayOnButton(2, "Pause");
}

void UpdateRunningState()
{
    DisplayTimeRemaining((GetTimerRemaining(runningTimer) + 9) / 10);
}

void ExitRunningState()
{
    CancelTimer(runningTimer); runningTimer = -1;
}

// ----------------------------------------------------------------------------
// Paused state, waiting to resume

int pausedTimer;

void EnterPausedState()
{
    if(debugStates) printf("EnterPausedState\n");
    appState = STATE_PAUSED;
    PauseTimer(runningTimer);
    pausedTimer = StartTimer(pausedToWaitingDuration);
    if(debugTimers) printf("pausedTimer = %d\n", pausedTimer);
}

void ResumeRunningFromPaused()
{
    CancelTimer(pausedTimer); pausedTimer = -1;
    ResumeTimer(runningTimer);
    appState = STATE_RUNNING;
}

void UpdatePausedState()
{
    if(GetTimerRemaining(pausedTimer) % 10 >= 5) {
        DisplayTimeRemaining((GetTimerRemaining(runningTimer) + 9) / 10);
    } else {
        DisplayString("--:--");
    }
}

void ExitPausedState()
{
    CancelTimer(runningTimer); runningTimer = -1;
    CancelTimer(pausedTimer); pausedTimer = -1;
}


// ----------------------------------------------------------------------------
// Timer has expired and alarm is going off

int alarmTimer;
int alarmStepTimer;
int beepClip;

enum {
    ALARM_BEEP,
    ALARM_QUIET,
} alarmStateStep;

const unsigned char timerBeep_bytes[] = {
    0x00, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80,
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x7f, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x7f, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x7f, 0x80, 
    0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x81, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 
    0x80, 0x81, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x7f, 0x80, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x81, 0x81, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x7f, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x81, 0x80, 0x7f, 0x80, 0x80, 0x7f, 0x80, 0x80, 
    0x80, 0x7f, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x80, 
    0x7f, 0x7f, 0x7f, 0x80, 0x81, 0x80, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x7f, 0x80, 0x80, 0x81, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 
    0x80, 0x7f, 0x80, 0x80, 0x7f, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x7f, 0x81, 
    0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x81, 0x7f, 0x80, 0x81, 0x80, 0x81, 0x80, 0x7f, 0x80, 
    0x80, 0x80, 0x7f, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x81, 0x81, 0x7f, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 
    0x81, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x80, 
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 
    0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 
    0x80, 0x80, 0x80, 0x81, 0x80, 0x7f, 0x81, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x81, 0x80, 0x81, 0x80, 
    0x80, 0x7f, 0x81, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x7f, 0x80, 0x80, 0x80, 
    0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x81, 0x7f, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x81, 0x80, 0x80, 
    0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x7f, 0x7f, 0x80, 0x81, 0x80, 
    0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x80, 0x7f, 0x80, 0x7f, 0x80, 0x80, 0x81, 0x80, 
    0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x80, 0x81, 0x80, 0x80, 0x81, 0x81, 0x80, 
    0x80, 0x80, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x80, 0x80, 0x80, 0x7f, 0x80, 
    0x81, 0x80, 0x80, 0x80, 0x81, 0x80, 0x7f, 0x7f, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x81, 0x7f, 0x80, 
    0x81, 0x81, 0x7f, 0x80, 0x7f, 0x80, 0x80, 0x81, 0x80, 0x81, 0x80, 0x83, 0x80, 0x82, 0x80, 0x83, 
    0x7c, 0x74, 0x93, 0x78, 0x6d, 0x82, 0x94, 0x70, 0x67, 0x94, 0x8f, 0x6c, 0x65, 0x9e, 0x97, 0x5e, 
    0x68, 0xa1, 0x95, 0x5b, 0x69, 0xa1, 0x92, 0x59, 0x6f, 0xa7, 0x90, 0x56, 0x72, 0xac, 0x8d, 0x52, 
    0x76, 0xb0, 0x87, 0x4c, 0x81, 0xb5, 0x7d, 0x4c, 0x87, 0xb6, 0x77, 0x4c, 0x8e, 0xb7, 0x70, 0x4e, 
    0x93, 0xb0, 0x64, 0x4f, 0x9c, 0xae, 0x60, 0x53, 0xa2, 0xa8, 0x57, 0x58, 0xa6, 0xa2, 0x53, 0x5d, 
    0xac, 0x9a, 0x4d, 0x63, 0xb3, 0x95, 0x4b, 0x6d, 0xb4, 0x8d, 0x48, 0x75, 0xb4, 0x82, 0x48, 0x7e, 
    0xb1, 0x7a, 0x4b, 0x86, 0xad, 0x70, 0x4d, 0x8e, 0xad, 0x6c, 0x4f, 0x94, 0xab, 0x63, 0x52, 0x9e, 
    0xab, 0x5d, 0x58, 0xa4, 0xa2, 0x58, 0x61, 0xab, 0x9c, 0x53, 0x66, 0xad, 0x9a, 0x51, 0x68, 0xaf, 
    0x91, 0x51, 0x71, 0xb0, 0x8c, 0x50, 0x7b, 0xb3, 0x84, 0x4d, 0x82, 0xb2, 0x7c, 0x4e, 0x87, 0xaf, 
    0x74, 0x52, 0x8f, 0xb0, 0x6c, 0x54, 0x98, 0xae, 0x68, 0x58, 0x9f, 0xa7, 0x61, 0x5e, 0xa5, 0x9f, 
    0x5a, 0x65, 0xa6, 0x97, 0x54, 0x69, 0xab, 0x92, 0x52, 0x6e, 0xae, 0x8c, 0x52, 0x78, 0xb0, 0x85, 
    0x51, 0x81, 0xb1, 0x7d, 0x4f, 0x86, 0xb0, 0x75, 0x53, 0x90, 0xae, 0x70, 0x55, 0x97, 0xa9, 0x67, 
    0x59, 0x9f, 0xa6, 0x62, 0x5d, 0xa3, 0xa5, 0x5d, 0x63, 0xa8, 0x9d, 0x57, 0x69, 0xab, 0x96, 0x53, 
    0x70, 0xad, 0x8d, 0x52, 0x74, 0xb1, 0x84, 0x4f, 0x7d, 0xb2, 0x7e, 0x4b, 0x84, 0xb0, 0x76, 0x4c, 
    0x8b, 0xb0, 0x6e, 0x4f, 0x95, 0xb1, 0x69, 0x53, 0x9b, 0xb0, 0x65, 0x58, 0xa2, 0xad, 0x61, 0x5c, 
    0xa7, 0xa6, 0x5a, 0x5f, 0xac, 0xa2, 0x56, 0x64, 0xb1, 0x9b, 0x51, 0x6e, 0xb6, 0x92, 0x4e, 0x75, 
    0xb4, 0x8a, 0x4e, 0x7d, 0xb6, 0x82, 0x4e, 0x88, 0xb3, 0x79, 0x4f, 0x8e, 0xb2, 0x70, 0x4d, 0x94, 
    0xb1, 0x6a, 0x51, 0x9c, 0xaf, 0x63, 0x59, 0xa2, 0xa9, 0x5c, 0x5b, 0xa4, 0xa1, 0x56, 0x5e, 0xa9, 
    0x9b, 0x52, 0x65, 0xac, 0x94, 0x4f, 0x6d, 0xb1, 0x8e, 0x4e, 0x73, 0xb2, 0x88, 0x4a, 0x7c, 0xb4, 
    0x83, 0x48, 0x82, 0xb5, 0x7a, 0x47, 0x88, 0xb7, 0x73, 0x4a, 0x91, 0xb7, 0x6a, 0x4d, 0x9b, 0xb4, 
    0x66, 0x51, 0xa1, 0xac, 0x5d, 0x57, 0xa4, 0xa6, 0x58, 0x5c, 0xa9, 0xa1, 0x54, 0x62, 0xac, 0x9b, 
    0x51, 0x69, 0xb1, 0x93, 0x50, 0x6f, 0xb2, 0x8b, 0x4b, 0x77, 0xb2, 0x80, 0x49, 0x7f, 0xb2, 0x7a, 
    0x4b, 0x88, 0xb1, 0x73, 0x4d, 0x93, 0xb5, 0x6d, 0x50, 0x9a, 0xb0, 0x62, 0x53, 0xa0, 0xaa, 0x5b, 
    0x57, 0xa6, 0xa5, 0x57, 0x5c, 0xac, 0xa1, 0x53, 0x63, 0xaf, 0x9a, 0x4d, 0x69, 0xb2, 0x91, 0x4a, 
    0x72, 0xb6, 0x8a, 0x47, 0x78, 0xb6, 0x82, 0x47, 0x82, 0xb9, 0x7a, 0x4b, 0x8c, 0xb6, 0x73, 0x4e, 
    0x92, 0xb2, 0x6a, 0x4e, 0x9a, 0xae, 0x60, 0x53, 0x9f, 0xa7, 0x5a, 0x5a, 0xa7, 0xa4, 0x56, 0x60, 
    0xab, 0x9b, 0x50, 0x66, 0xaf, 0x94, 0x4e, 0x6c, 0xb3, 0x8c, 0x4c, 0x75, 0xb5, 0x85, 0x49, 0x7b, 
    0xb5, 0x7e, 0x48, 0x84, 0xb3, 0x74, 0x49, 0x8c, 0xb2, 0x6d, 0x4e, 0x95, 0xb1, 0x66, 0x4f, 0x9e, 
    0xab, 0x5f, 0x56, 0xa3, 0xa6, 0x5d, 0x5c, 0xaa, 0xa1, 0x57, 0x62, 0xad, 0x9b, 0x54, 0x69, 0xaf, 
    0x93, 0x4f, 0x72, 0xb1, 0x8c, 0x4b, 0x7a, 0xb1, 0x84, 0x48, 0x85, 0xb0, 0x80, 0x49, 0x86, 0xb1, 
    0x7e, 0x5e, 0x77, 0xab, 0x7d, 0x6a, 0x73, 0x9b, 0x87, 0x6a, 0x79, 0x86, 0x87, 0x72, 0x7e, 0x82, 
    0x85, 0x7b, 0x83, 0x84, 0x7c, 0x80, 0x85, 0x82, 0x79, 0x80, 0x87, 0x82, 0x79, 0x7e, 0x89, 0x83, 
    0x79, 0x7e, 0x87, 0x87, 0x7a, 0x7b, 0x87, 0x86, 0x7a, 0x7c, 0x85, 0x86, 0x7b, 0x7a, 0x86, 0x87, 
    0x7f, 0x7b, 0x85, 0x86, 0x7e, 0x7c, 0x82, 0x84, 0x7d, 0x7c, 0x81, 0x82, 0x7d, 0x80, 0x83, 0x81, 
    0x7d, 0x80, 0x82, 0x7f, 0x7d, 0x7f, 0x84, 0x80, 0x7b, 0x81, 0x85, 0x80, 0x7c, 0x82, 0x85, 0x80, 
    0x7c, 0x82, 0x84, 0x7f, 0x7d, 0x82, 0x87, 0x7b, 0x7f, 0x80, 0x87, 0x7b, 0x7b, 0x84, 0x82, 0x7c, 
    0x7a, 0x87, 0x82, 0x7c, 0x7c, 0x87, 0x82, 0x7c, 0x7d, 0x87, 0x83, 0x7b, 0x81, 0x88, 0x81, 0x7a, 
    0x82, 0x86, 0x7e, 0x7a, 0x83, 0x86, 0x7e, 0x7b, 0x86, 0x86, 0x7d, 0x7d, 0x88, 0x84, 0x7b, 0x7e, 
    0x87, 0x81, 0x78, 0x7f, 0x86, 0x80, 0x77, 0x80, 0x87, 0x7f, 0x74, 0x81, 0x87, 0x7b, 0x76, 0x81, 
    0x89, 0x79, 0x76, 0x83, 0x8a, 0x79, 0x77, 0x87, 0x8a, 0x7b, 0x77, 0x89, 0x8a, 0x79, 0x79, 0x89, 
    0x88, 0x75, 0x79, 0x88, 0x85, 0x75, 0x79, 0x8a, 0x84, 0x74, 0x7a, 0x8d, 0x84, 0x75, 0x7d, 0x8d, 
    0x84, 0x75, 0x80, 0x8e, 0x82, 0x72, 0x81, 0x8f, 0x81, 0x73, 0x84, 0x8f, 0x80, 0x73, 0x84, 0x8e, 
    0x7b, 0x72, 0x83, 0x8d, 0x7a, 0x72, 0x89, 0x8e, 0x79, 0x74, 0x88, 0x8d, 0x77, 0x76, 0x8a, 0x8b, 
    0x76, 0x79, 0x8a, 0x87, 0x77, 0x77, 0x89, 0x83, 0x76, 0x79, 0x8a, 0x82, 0x75, 0x7e, 0x8b, 0x82, 
    0x76, 0x81, 0x8a, 0x80, 0x75, 0x82, 0x89, 0x7d, 0x74, 0x81, 0x88, 0x7b, 0x75, 0x80, 0x87, 0x77, 
    0x78, 0x84, 0x86, 0x79, 0x7a, 0x86, 0x84, 0x78, 0x7b, 0x87, 0x82, 0x76, 0x7b, 0x86, 0x7f, 0x76, 
    0x7f, 0x87, 0x80, 0x76, 0x81, 0x89, 0x7f, 0x78, 0x82, 0x8a, 0x7d, 0x78, 0x85, 0x89, 0x7c, 0x76, 
    0x85, 0x87, 0x7a, 0x77, 0x84, 0x85, 0x79, 0x77, 0x82, 0x83, 0x7a, 0x79, 0x82, 0x84, 0x7b, 0x7c, 
    0x83, 0x83, 0x7c, 0x7f, 0x84, 0x82, 0x7c, 0x7f, 0x83, 0x7f, 0x7e, 0x80, 0x84, 0x7f, 0x7c, 0x81, 
    0x84, 0x7f, 0x7d, 0x83, 0x84, 0x7e, 0x7c, 0x84, 0x82, 0x7e, 0x7f, 0x84, 0x82, 0x7c, 0x7f, 0x83, 
    0x80, 0x7c, 0x80, 0x83, 0x7f, 0x7d, 0x81, 0x82, 0x7d, 0x7b, 0x82, 0x82, 0x7e, 0x7c, 0x82, 0x83, 
    0x7e, 0x7e, 0x82, 0x81, 0x7b, 0x7e, 0x82, 0x82, 0x7b, 0x7e, 0x82, 0x80, 0x7a, 0x7e, 0x81, 0x7d, 
    0x79, 0x7d, 0x81, 0x7d, 0x79, 0x7e, 0x82, 0x7d, 0x7b, 0x80, 0x83, 0x7e, 0x7d, 0x81, 0x84, 0x7f, 
    0x7e, 0x83, 0x85, 0x80, 0x7f, 0x83, 0x83, 0x7e, 0x7f, 0x85, 0x84, 0x7e, 0x7f, 0x86, 0x85, 0x7d, 
    0x7f, 0x85, 0x84, 0x7e, 0x7f, 0x85, 0x83, 0x7e, 0x80, 0x86, 0x84, 0x7d, 0x80, 0x87, 0x85, 0x7e, 
    0x80, 0x86, 0x83, 0x7c, 0x7f, 0x85, 0x80, 0x7d, 0x7f, 0x84, 0x80, 0x7a, 0x7f, 0x83, 0x7e, 0x77, 
    0x7b, 0x80, 0x7b, 0x77, 0x7c, 0x83, 0x7e, 0x7b, 0x80, 0x86, 0x80, 0x79, 0x81, 0x85, 0x7e, 0x79, 
    0x82, 0x85, 0x7f, 0x7b, 0x83, 0x87, 0x7f, 0x7c, 0x86, 0x88, 0x7f, 0x7c, 0x86, 0x85, 0x7d, 0x7d, 
    0x86, 0x86, 0x7d, 0x7e, 0x86, 0x84, 0x7b, 0x7f, 0x86, 0x82, 0x79, 0x7d, 0x84, 0x7f, 0x79, 0x7e, 
    0x84, 0x7f, 0x7a, 0x7f, 0x84, 0x81, 0x7c, 0x83, 0x88, 0x81, 0x7b, 0x82, 0x88, 0x80, 0x7c, 0x83, 
    0x87, 0x7d, 0x7c, 0x83, 0x86, 0x7e, 0x7d, 0x85, 0x85, 0x7e, 0x7e, 0x86, 0x86, 0x7e, 0x80, 0x88, 
    0x86, 0x7e, 0x81, 0x85, 0x85, 0x7c, 0x82, 0x86, 0x88, 0x78, 0x80, 0x9a, 0x72, 0x72, 0x8f, 0x98, 
    0x69, 0x6f, 0xa1, 0x91, 0x63, 0x6c, 0xab, 0x90, 0x59, 0x73, 0xad, 0x8b, 0x56, 0x77, 0xad, 0x89, 
    0x52, 0x7b, 0xad, 0x86, 0x50, 0x81, 0xaf, 0x7e, 0x50, 0x87, 0xb1, 0x73, 0x4e, 0x93, 0xae, 0x66, 
    0x50, 0x9a, 0xac, 0x60, 0x52, 0xa1, 0xab, 0x58, 0x58, 0xa9, 0xa7, 0x54, 0x5d, 0xb0, 0xa2, 0x50, 
    0x64, 0xb6, 0x9b, 0x4b, 0x6b, 0xb8, 0x95, 0x49, 0x71, 0xbc, 0x8b, 0x46, 0x79, 0xbd, 0x86, 0x47, 
    0x84, 0xbf, 0x7c, 0x48, 0x8b, 0xbb, 0x71, 0x47, 0x92, 0xb6, 0x68, 0x49, 0x9a, 0xb2, 0x62, 0x4e, 
    0xa3, 0xad, 0x5c, 0x54, 0xaa, 0xaa, 0x55, 0x5b, 0xaf, 0xa3, 0x50, 0x61, 0xb2, 0x9d, 0x4d, 0x68, 
    0xb5, 0x95, 0x4c, 0x70, 0xb8, 0x8e, 0x4a, 0x79, 0xb8, 0x84, 0x4a, 0x80, 0xb5, 0x7c, 0x49, 0x86, 
    0xb1, 0x73, 0x4a, 0x8d, 0xae, 0x6b, 0x50, 0x95, 0xaa, 0x66, 0x55, 0x9a, 0xa7, 0x60, 0x5a, 0xa1, 
    0xa2, 0x5d, 0x61, 0xa7, 0x9b, 0x57, 0x68, 0xab, 0x94, 0x53, 0x70, 0xad, 0x8d, 0x51, 0x76, 0xae, 
    0x85, 0x4f, 0x7d, 0xaf, 0x7c, 0x50, 0x84, 0xaf, 0x75, 0x51, 0x8d, 0xad, 0x6f, 0x51, 0x93, 0xa9, 
    0x66, 0x56, 0x98, 0xa5, 0x60, 0x5a, 0x9f, 0xa0, 0x5a, 0x5f, 0xa5, 0x9a, 0x57, 0x66, 0xa9, 0x94, 
    0x53, 0x6e, 0xad, 0x8d, 0x50, 0x75, 0xae, 0x83, 0x4c, 0x7b, 0xb0, 0x7c, 0x4b, 0x85, 0xb2, 0x75, 
    0x4e, 0x8d, 0xb1, 0x6f, 0x4f, 0x95, 0xae, 0x68, 0x52, 0x9d, 0xac, 0x61, 0x57, 0xa1, 0xa7, 0x5b, 
    0x59, 0xa5, 0xa1, 0x56, 0x60, 0xab, 0x9c, 0x52, 0x66, 0xae, 0x95, 0x4f, 0x6d, 0xb1, 0x8e, 0x4d, 
    0x73, 0xb3, 0x88, 0x4d, 0x7d, 0xb3, 0x7f, 0x4a, 0x83, 0xb2, 0x76, 0x4c, 0x8a, 0xb1, 0x6f, 0x4c, 
    0x90, 0xaf, 0x68, 0x50, 0x9a, 0xad, 0x63, 0x57, 0xa2, 0xa9, 0x5e, 0x5c, 0xa7, 0xa4, 0x58, 0x61, 
    0xad, 0x9d, 0x54, 0x6a, 0xb0, 0x95, 0x4f, 0x70, 0xb4, 0x8d, 0x4c, 0x77, 0xb5, 0x87, 0x4b, 0x7f, 
    0xb8, 0x80, 0x4a, 0x86, 0xb9, 0x78, 0x4a, 0x8e, 0xb8, 0x70, 0x48, 0x94, 0xb5, 0x68, 0x4c, 0x9a, 
    0xb1, 0x60, 0x51, 0xa1, 0xae, 0x5b, 0x55, 0xa7, 0xa8, 0x54, 0x59, 0xad, 0xa1, 0x4e, 0x61, 0xb5, 
    0x9a, 0x4c, 0x68, 0xb7, 0x93, 0x46, 0x72, 0xb7, 0x8a, 0x46, 0x7b, 0xb9, 0x81, 0x48, 0x83, 0xb9, 
    0x7b, 0x48, 0x8a, 0xb8, 0x73, 0x4a, 0x94, 0xb9, 0x6b, 0x4f, 0x9d, 0xb6, 0x66, 0x54, 0xa4, 0xb2, 
    0x61, 0x57, 0xa9, 0xac, 0x56, 0x5a, 0xad, 0xa4, 0x50, 0x63, 0xb2, 0x9b, 0x4d, 0x6b, 0xb6, 0x93, 
    0x4b, 0x71, 0xb8, 0x8a, 0x4b, 0x7c, 0xb8, 0x83, 0x4b, 0x83, 0xb7, 0x7a, 0x4c, 0x8e, 0xb6, 0x72, 
    0x50, 0x99, 0xb6, 0x6b, 0x54, 0x9f, 0xb0, 0x64, 0x56, 0xa3, 0xab, 0x5b, 0x59, 0xa8, 0xa2, 0x55, 
    0x61, 0xae, 0x9b, 0x51, 0x69, 0xb0, 0x96, 0x4f, 0x70, 0xb2, 0x8e, 0x4c, 0x76, 0xb3, 0x86, 0x4a, 
    0x7e, 0xb7, 0x7d, 0x4a, 0x87, 0xb6, 0x74, 0x4d, 0x90, 0xb3, 0x6a, 0x4f, 0x98, 0xaf, 0x64, 0x51, 
    0x9f, 0xaa, 0x5b, 0x56, 0xa5, 0xa1, 0x56, 0x5b, 0xaa, 0x9c, 0x50, 0x63, 0xaf, 0x97, 0x4c, 0x6a, 
    0xb3, 0x8e, 0x49, 0x70, 0xb3, 0x87, 0x46, 0x79, 0xb6, 0x7f, 0x47, 0x80, 0xb2, 0x79, 0x48, 0x8b, 
    0xb4, 0x72, 0x4f, 0x94, 0xb1, 0x6b, 0x55, 0x99, 0xb0, 0x65, 0x59, 0xa2, 0xaa, 0x60, 0x5e, 0xa8, 
    0xa1, 0x59, 0x64, 0xaf, 0x9c, 0x57, 0x6e, 0xb3, 0x94, 0x50, 0x72, 0xb1, 0x8c, 0x4d, 0x7a, 0xb1, 
    0x83, 0x47, 0x82, 0xb3, 0x7f, 0x45, 0x85, 0xb1, 0x79, 0x58, 0x75, 0xad, 0x7b, 0x63, 0x72, 0x9c, 
    0x88, 0x66, 0x7b, 0x8a, 0x88, 0x6d, 0x7e, 0x84, 0x82, 0x75, 0x82, 0x83, 0x78, 0x7d, 0x86, 0x83, 
    0x74, 0x80, 0x87, 0x81, 0x73, 0x7c, 0x88, 0x80, 0x73, 0x7a, 0x87, 0x82, 0x76, 0x7a, 0x86, 0x87, 
    0x79, 0x79, 0x84, 0x85, 0x79, 0x78, 0x85, 0x84, 0x7a, 0x79, 0x86, 0x83, 0x7a, 0x7c, 0x86, 0x84, 
    0x7b, 0x7d, 0x85, 0x83, 0x7a, 0x7e, 0x84, 0x82, 0x79, 0x7e, 0x85, 0x81, 0x78, 0x7f, 0x87, 0x80, 
    0x78, 0x7e, 0x84, 0x7d, 0x76, 0x80, 0x84, 0x7c, 0x76, 0x81, 0x85, 0x7b, 0x78, 0x82, 0x87, 0x78, 
    0x7a, 0x82, 0x85, 0x79, 0x7b, 0x86, 0x84, 0x7a, 0x7b, 0x88, 0x84, 0x7a, 0x7d, 0x89, 0x83, 0x79, 
    0x7f, 0x89, 0x82, 0x79, 0x82, 0x88, 0x7f, 0x78, 0x84, 0x87, 0x7b, 0x79, 0x85, 0x85, 0x79, 0x79, 
    0x85, 0x84, 0x77, 0x7b, 0x88, 0x82, 0x77, 0x7e, 0x8a, 0x83, 0x78, 0x82, 0x8c, 0x82, 0x76, 0x84, 
    0x8d, 0x7e, 0x74, 0x85, 0x8d, 0x7b, 0x74, 0x85, 0x8f, 0x7a, 0x74, 0x87, 0x8d, 0x78, 0x74, 0x89, 
    0x8d, 0x77, 0x73, 0x8b, 0x8d, 0x78, 0x75, 0x8f, 0x8e, 0x75, 0x78, 0x8d, 0x8a, 0x73, 0x7a, 0x90, 
    0x89, 0x74, 0x7b, 0x91, 0x88, 0x72, 0x7d, 0x92, 0x85, 0x73, 0x80, 0x94, 0x84, 0x71, 0x83, 0x94, 
    0x82, 0x71, 0x83, 0x93, 0x7f, 0x71, 0x84, 0x92, 0x7c, 0x70, 0x85, 0x90, 0x7b, 0x71, 0x88, 0x8e, 
    0x77, 0x73, 0x89, 0x8c, 0x76, 0x74, 0x88, 0x89, 0x73, 0x76, 0x8b, 0x89, 0x75, 0x78, 0x8d, 0x86, 
    0x74, 0x7c, 0x8e, 0x84, 0x73, 0x7f, 0x8c, 0x81, 0x73, 0x80, 0x8c, 0x81, 0x75, 0x85, 0x8e, 0x80, 
    0x77, 0x87, 0x8e, 0x7d, 0x79, 0x87, 0x8e, 0x7c, 0x7a, 0x89, 0x8b, 0x7c, 0x7a, 0x8a, 0x89, 0x79, 
    0x7a, 0x89, 0x85, 0x76, 0x7b, 0x89, 0x83, 0x75, 0x7b, 0x89, 0x82, 0x76, 0x7e, 0x8b, 0x81, 0x76, 
    0x80, 0x8c, 0x80, 0x75, 0x82, 0x8c, 0x80, 0x75, 0x83, 0x8b, 0x7f, 0x75, 0x82, 0x89, 0x7b, 0x75, 
    0x81, 0x86, 0x7b, 0x77, 0x81, 0x86, 0x7a, 0x78, 0x81, 0x83, 0x7b, 0x7a, 0x82, 0x81, 0x7a, 0x7c, 
    0x81, 0x80, 0x7c, 0x7e, 0x84, 0x81, 0x7c, 0x81, 0x85, 0x81, 0x7c, 0x81, 0x85, 0x7f, 0x7d, 0x83, 
    0x84, 0x7e, 0x7d, 0x84, 0x84, 0x7d, 0x7d, 0x82, 0x82, 0x7d, 0x7c, 0x81, 0x80, 0x7c, 0x7d, 0x82, 
    0x81, 0x7d, 0x81, 0x82, 0x80, 0x7e, 0x80, 0x82, 0x80, 0x7d, 0x81, 0x82, 0x7f, 0x7d, 0x82, 0x84, 
    0x7f, 0x7f, 0x83, 0x83, 0x7e, 0x7d, 0x81, 0x82, 0x7c, 0x7d, 0x82, 0x83, 0x7c, 0x7f, 0x83, 0x81, 
    0x7c, 0x7e, 0x84, 0x80, 0x7c, 0x7d, 0x83, 0x81, 0x7d, 0x7f, 0x82, 0x7f, 0x7d, 0x80, 0x81, 0x7e, 
    0x7c, 0x80, 0x81, 0x7d, 0x7b, 0x80, 0x82, 0x7d, 0x7c, 0x81, 0x83, 0x7e, 0x7c, 0x83, 0x84, 0x7e, 
    0x7c, 0x82, 0x84, 0x7c, 0x7c, 0x83, 0x85, 0x7b, 0x7d, 0x84, 0x83, 0x7b, 0x7e, 0x85, 0x81, 0x7b, 
    0x7b, 0x84, 0x81, 0x79, 0x7c, 0x83, 0x80, 0x78, 0x7c, 0x85, 0x81, 0x79, 0x7e, 0x84, 0x7e, 0x79, 
    0x7e, 0x85, 0x7e, 0x78, 0x7f, 0x84, 0x7e, 0x79, 0x81, 0x86, 0x7f, 0x7a, 0x83, 0x87, 0x7f, 0x7c, 
    0x84, 0x86, 0x7e, 0x7c, 0x86, 0x87, 0x7d, 0x7d, 0x85, 0x85, 0x7d, 0x7c, 0x84, 0x83, 0x7b, 0x7d, 
    0x83, 0x81, 0x7a, 0x7b, 0x84, 0x82, 0x7a, 0x7d, 0x84, 0x80, 0x79, 0x7d, 0x83, 0x7e, 0x77, 0x7e, 
    0x83, 0x7f, 0x79, 0x7f, 0x84, 0x7e, 0x7a, 0x82, 0x87, 0x7e, 0x7a, 0x81, 0x85, 0x7b, 0x79, 0x82, 
    0x84, 0x7a, 0x79, 0x81, 0x82, 0x79, 0x79, 0x81, 0x83, 0x79, 0x7a, 0x83, 0x85, 0x79, 0x80, 0x84, 
    0x86, 0x74, 0x7f, 0x9b, 0x72, 0x71, 0x90, 0x99, 0x68, 0x6d, 0xa0, 0x91, 0x60, 0x6b, 0xab, 0x91, 
    0x59, 0x71, 0xad, 0x8f, 0x56, 0x76, 0xab, 0x8a, 0x56, 0x7a, 0xad, 0x86, 0x54, 0x7e, 0xad, 0x7f, 
    0x51, 0x82, 0xaf, 0x76, 0x4d, 0x8d, 0xb0, 0x6c, 0x4c, 0x97, 0xaf, 0x62, 0x4d, 0x9e, 0xa9, 0x59, 
    0x54, 0xa4, 0xa6, 0x55, 0x5b, 0xab, 0xa1, 0x51, 0x61, 0xb0, 0x9c, 0x4c, 0x69, 0xb5, 0x96, 0x4a, 
    0x70, 0xb9, 0x8c, 0x48, 0x79, 0xbb, 0x85, 0x49, 0x84, 0xbc, 0x7b, 0x48, 0x8b, 0xba, 0x73, 0x4b, 
    0x93, 0xb8, 0x6e, 0x4e, 0x99, 0xb4, 0x64, 0x4f, 0xa1, 0xad, 0x5e, 0x53, 0xa6, 0xa9, 0x58, 0x5c, 
    0xac, 0xa1, 0x53, 0x64, 0xb1, 0x9b, 0x50, 0x6a, 0xb3, 0x92, 0x4c, 0x73, 0xb7, 0x8c, 0x49, 0x7b, 
    0xb6, 0x82, 0x4a, 0x82, 0xb5, 0x79, 0x4a, 0x89, 0xb3, 0x72, 0x4b, 0x90, 0xaf, 0x68, 0x4e, 0x97, 
    0xab, 0x63, 0x55, 0x9e, 0xaa, 0x5f, 0x5a, 0xa6, 0xa4, 0x5a, 0x63, 0xab, 0x9e, 0x57, 0x6a, 0xaf, 
    0x97, 0x55, 0x75, 0xb1, 0x8e, 0x53, 0x7b, 0xb1, 0x85, 0x52, 0x81, 0xb2, 0x7b, 0x50, 0x88, 0xb1, 
    0x74, 0x51, 0x90, 0xae, 0x6e, 0x53, 0x97, 0xac, 0x66, 0x57, 0x9d, 0xa8, 0x60, 0x5c, 0xa2, 0xa3, 
    0x5c, 0x60, 0xa7, 0x9d, 0x57, 0x67, 0xac, 0x99, 0x53, 0x6e, 0xb0, 0x8f, 0x51, 0x75, 0xb4, 0x89, 
    0x50, 0x7f, 0xb6, 0x81, 0x50, 0x8a, 0xb7, 0x7a, 0x51, 0x90, 0xb3, 0x71, 0x51, 0x97, 0xaf, 0x69, 
    0x54, 0x9d, 0xac, 0x62, 0x59, 0xa3, 0xa7, 0x5d, 0x5e, 0xa8, 0xa1, 0x57, 0x62, 0xaa, 0x9b, 0x54, 
    0x67, 0xae, 0x96, 0x51, 0x6d, 0xb2, 0x90, 0x4e, 0x72, 0xb3, 0x87, 0x4b, 0x7c, 0xb3, 0x7e, 0x49, 
    0x83, 0xb2, 0x77, 0x4d, 0x8c, 0xb3, 0x70, 0x4f, 0x94, 0xb0, 0x69, 0x52, 0x9b, 0xab, 0x60, 0x54, 
    0xa1, 0xa7, 0x5a, 0x5a, 0xa7, 0xa1, 0x55, 0x62, 0xac, 0x9c, 0x52, 0x6a, 0xb2, 0x96, 0x4f, 0x73, 
    0xb8, 0x90, 0x51, 0x7b, 0xb9, 0x8a, 0x4e, 0x82, 0xba, 0x81, 0x4b, 0x88, 0xb9, 0x79, 0x49, 0x8f, 
    0xb9, 0x70, 0x4b, 0x94, 0xb4, 0x67, 0x4c, 0x9c, 0xb0, 0x5f, 0x50, 0xa1, 0xaa, 0x58, 0x56, 0xa7, 
    0xa4, 0x53, 0x5b, 0xae, 0x9d, 0x4e, 0x64, 0xb3, 0x96, 0x4a, 0x6b, 0xb5, 0x8f, 0x48, 0x72, 0xb6, 
    0x87, 0x45, 0x7a, 0xba, 0x80, 0x44, 0x83, 0xb9, 0x77, 0x43, 0x8c, 0xb8, 0x6f, 0x49, 0x93, 0xb4, 
    0x67, 0x4d, 0x9c, 0xb2, 0x61, 0x4f, 0xa0, 0xac, 0x5b, 0x52, 0xa5, 0xa7, 0x53, 0x58, 0xaa, 0xa0, 
    0x4f, 0x62, 0xb1, 0x98, 0x4c, 0x6a, 0xb6, 0x91, 0x49, 0x72, 0xb8, 0x87, 0x46, 0x7c, 0xb6, 0x7f, 
    0x44, 0x85, 0xb6, 0x75, 0x46, 0x8c, 0xb6, 0x6d, 0x48, 0x94, 0xb5, 0x65, 0x4c, 0x9e, 0xb0, 0x5f, 
    0x53, 0xa3, 0xab, 0x59, 0x58, 0xa7, 0xa5, 0x52, 0x5f, 0xb1, 0x9d, 0x4e, 0x67, 0xb3, 0x98, 0x4d, 
    0x6d, 0xb8, 0x90, 0x4a, 0x76, 0xb8, 0x86, 0x4b, 0x7f, 0xb9, 0x7f, 0x4b, 0x89, 0xba, 0x79, 0x4e, 
    0x92, 0xb4, 0x6d, 0x4e, 0x99, 0xaf, 0x61, 0x54, 0xa0, 0xa7, 0x5a, 0x57, 0xa4, 0xa0, 0x56, 0x5d, 
    0xa8, 0x9b, 0x50, 0x63, 0xae, 0x97, 0x4e, 0x6b, 0xb1, 0x92, 0x4d, 0x71, 0xb5, 0x8b, 0x4b, 0x7a, 
    0xb7, 0x81, 0x4a, 0x83, 0xb4, 0x79, 0x4d, 0x8c, 0xb3, 0x74, 0x4f, 0x95, 0xb2, 0x6c, 0x53, 0x9d, 
    0xad, 0x64, 0x57, 0xa2, 0xa8, 0x5f, 0x5d, 0xa9, 0xa3, 0x59, 0x63, 0xad, 0x9d, 0x54, 0x6b, 0xb0, 
    0x93, 0x51, 0x71, 0xaf, 0x8e, 0x4d, 0x78, 0xb1, 0x87, 0x48, 0x80, 0xb2, 0x82, 0x46, 0x84, 0xb4, 
    0x80, 0x5a, 0x73, 0xaf, 0x7e, 0x65, 0x70, 0x9c, 0x89, 0x67, 0x7a, 0x89, 0x89, 0x6e, 0x7e, 0x84, 
    0x83, 0x75, 0x83, 0x85, 0x7a, 0x7d, 0x85, 0x83, 0x75, 0x80, 0x88, 0x83, 0x75, 0x7c, 0x89, 0x83, 
    0x75, 0x7c, 0x88, 0x85, 0x78, 0x79, 0x85, 0x88, 0x7a, 0x7a, 0x86, 0x8a, 0x7e, 0x7a, 0x88, 0x89, 
    0x7f, 0x7b, 0x89, 0x88, 0x7c, 0x7c, 0x86, 0x85, 0x7b, 0x7c, 0x85, 0x84, 0x7a, 0x7d, 0x86, 0x83, 
    0x78, 0x7d, 0x86, 0x81, 0x78, 0x7d, 0x86, 0x7f, 0x76, 0x7e, 0x85, 0x80, 0x76, 0x80, 0x87, 0x7f, 
    0x79, 0x83, 0x89, 0x7e, 0x7a, 0x82, 0x8a, 0x7b, 0x7c, 0x84, 0x88, 0x7b, 0x7b, 0x86, 0x85, 0x7c, 
    0x7b, 0x87, 0x83, 0x7a, 0x7c, 0x87, 0x84, 0x7a, 0x7e, 0x8a, 0x83, 0x7c, 0x81, 0x89, 0x80, 0x78, 
    0x82, 0x85, 0x7b, 0x78, 0x83, 0x85, 0x7a, 0x78, 0x85, 0x85, 0x78, 0x78, 0x88, 0x84, 0x76, 0x7b, 
    0x88, 0x81, 0x75, 0x7d, 0x88, 0x81, 0x74, 0x7f, 0x89, 0x7f, 0x71, 0x80, 0x8a, 0x7e, 0x73, 0x81, 
    0x8d, 0x7c, 0x73, 0x84, 0x8f, 0x7a, 0x74, 0x87, 0x8d, 0x7a, 0x73, 0x88, 0x8b, 0x77, 0x72, 0x88, 
    0x8a, 0x74, 0x75, 0x88, 0x87, 0x72, 0x76, 0x8a, 0x85, 0x72, 0x78, 0x8b, 0x84, 0x71, 0x7a, 0x8d, 
    0x82, 0x71, 0x7c, 0x8e, 0x81, 0x70, 0x7e, 0x8f, 0x7f, 0x70, 0x80, 0x90, 0x7e, 0x71, 0x82, 0x8d, 
    0x7c, 0x71, 0x83, 0x8f, 0x7b, 0x71, 0x86, 0x8d, 0x79, 0x73, 0x87, 0x8d, 0x78, 0x75, 0x88, 0x8a, 
    0x76, 0x75, 0x8a, 0x87, 0x76, 0x76, 0x8a, 0x85, 0x74, 0x79, 0x8a, 0x83, 0x73, 0x7d, 0x89, 0x81, 
    0x74, 0x7f, 0x89, 0x7f, 0x74, 0x82, 0x8b, 0x7f, 0x75, 0x83, 0x8b, 0x7c, 0x77, 0x84, 0x8d, 0x7c, 
    0x79, 0x88, 0x89, 0x7a, 0x76, 0x86, 0x86, 0x79, 0x79, 0x87, 0x85, 0x75, 0x7a, 0x87, 0x83, 0x77, 
    0x7c, 0x89, 0x84, 0x77, 0x7d, 0x8a, 0x80, 0x76, 0x7d, 0x8a, 0x80, 0x75, 0x7e, 0x8b, 0x81, 0x74, 
    0x81, 0x8c, 0x80, 0x74, 0x82, 0x8b, 0x7f, 0x76, 0x84, 0x8a, 0x7f, 0x79, 0x85, 0x89, 0x7f, 0x7c, 
    0x84, 0x88, 0x7e, 0x7d, 0x84, 0x84, 0x7c, 0x7c, 0x83, 0x82, 0x7b, 0x7c, 0x82, 0x80, 0x79, 0x7e, 
    0x82, 0x7f, 0x7a, 0x80, 0x84, 0x80, 0x7d, 0x82, 0x84, 0x80, 0x7e, 0x83, 0x86, 0x7f, 0x7f, 0x84, 
    0x84, 0x80, 0x80, 0x85, 0x85, 0x80, 0x82, 0x85, 0x85, 0x80, 0x82, 0x84, 0x83, 0x80, 0x81, 0x83, 
    0x81, 0x7e, 0x81, 0x82, 0x7f, 0x7c, 0x81, 0x82, 0x7e, 0x7d, 0x80, 0x82, 0x7e, 0x7e, 0x82, 0x85, 
    0x7f, 0x80, 0x84, 0x85, 0x7f, 0x80, 0x84, 0x84, 0x7f, 0x80, 0x85, 0x83, 0x80, 0x80, 0x84, 0x83, 
    0x7f, 0x80, 0x85, 0x82, 0x7d, 0x81, 0x84, 0x80, 0x7e, 0x82, 0x84, 0x7f, 0x7e, 0x82, 0x85, 0x7e, 
    0x7d, 0x83, 0x84, 0x7e, 0x7b, 0x82, 0x83, 0x7e, 0x7d, 0x84, 0x85, 0x7d, 0x7c, 0x83, 0x85, 0x7c, 
    0x7d, 0x83, 0x84, 0x7b, 0x7c, 0x84, 0x82, 0x7c, 0x7d, 0x86, 0x84, 0x7d, 0x80, 0x87, 0x83, 0x7a, 
    0x7e, 0x86, 0x80, 0x77, 0x7d, 0x87, 0x80, 0x79, 0x7f, 0x87, 0x7f, 0x78, 0x80, 0x86, 0x7e, 0x78, 
    0x82, 0x88, 0x7f, 0x7a, 0x84, 0x88, 0x80, 0x7c, 0x85, 0x89, 0x80, 0x7c, 0x85, 0x89, 0x7e, 0x7d, 
    0x86, 0x86, 0x7c, 0x7c, 0x86, 0x87, 0x7e, 0x7e, 0x88, 0x86, 0x7c, 0x7e, 0x87, 0x85, 0x7e, 0x80, 
    0x87, 0x83, 0x7c, 0x7e, 0x85, 0x81, 0x79, 0x7e, 0x85, 0x7f, 0x77, 0x7f, 0x85, 0x7e, 0x78, 0x80, 
    0x86, 0x7e, 0x7c, 0x82, 0x85, 0x7e, 0x7c, 0x84, 0x86, 0x7e, 0x7c, 0x83, 0x87, 0x7c, 0x7d, 0x84, 
    0x86, 0x7b, 0x7d, 0x84, 0x85, 0x79, 0x7e, 0x85, 0x85, 0x73, 0x7c, 0x99, 0x74, 0x6f, 0x8d, 0x9a, 
    0x6a, 0x6b, 0x9e, 0x95, 0x62, 0x69, 0xaa, 0x93, 0x59, 0x6e, 0xad, 0x8f, 0x55, 0x74, 0xad, 0x8c, 
    0x52, 0x77, 0xaf, 0x87, 0x4d, 0x7b, 0xb2, 0x7f, 0x4a, 0x85, 0xb5, 0x76, 0x4a, 0x8e, 0xb4, 0x6b, 
    0x4e, 0x98, 0xb1, 0x65, 0x4f, 0x9f, 0xae, 0x5c, 0x54, 0xa4, 0xa9, 0x56, 0x57, 0xab, 0xa4, 0x51, 
    0x5d, 0xb0, 0x9f, 0x4c, 0x64, 0xb3, 0x97, 0x49, 0x6c, 0xb6, 0x8c, 0x48, 0x76, 0xb9, 0x85, 0x46, 
    0x7f, 0xba, 0x7c, 0x47, 0x88, 0xb7, 0x74, 0x4a, 0x92, 0xb6, 0x6d, 0x4e, 0x99, 0xb4, 0x66, 0x50, 
    0xa0, 0xae, 0x60, 0x54, 0xa7, 0xaa, 0x58, 0x5b, 0xac, 0xa2, 0x51, 0x62, 0xb0, 0x99, 0x4b, 0x69, 
    0xb3, 0x92, 0x49, 0x70, 0xb6, 0x8a, 0x47, 0x78, 0xb6, 0x81, 0x48, 0x80, 0xb5, 0x7c, 0x49, 0x88, 
    0xb6, 0x74, 0x4b, 0x91, 0xb4, 0x6c, 0x50, 0x98, 0xaf, 0x66, 0x54, 0x9c, 0xab, 0x60, 0x57, 0xa3, 
    0xa5, 0x5b, 0x5d, 0xa8, 0x9f, 0x58, 0x64, 0xae, 0x99, 0x54, 0x6e, 0xb0, 0x90, 0x51, 0x75, 0xaf, 
    0x87, 0x50, 0x7e, 0xb2, 0x7f, 0x51, 0x87, 0xb1, 0x77, 0x51, 0x8d, 0xad, 0x6f, 0x50, 0x93, 0xab, 
    0x66, 0x54, 0x9a, 0xa7, 0x5f, 0x59, 0xa0, 0xa2, 0x57, 0x5e, 0xa5, 0x9a, 0x52, 0x62, 0xaa, 0x95, 
    0x4e, 0x69, 0xae, 0x8c, 0x4b, 0x73, 0xb3, 0x87, 0x4b, 0x7d, 0xb5, 0x80, 0x4c, 0x85, 0xb5, 0x77, 
    0x4d, 0x8e, 0xb4, 0x71, 0x51, 0x95, 0xb0, 0x69, 0x53, 0x9e, 0xad, 0x63, 0x5a, 0xa4, 0xa9, 0x5c, 
    0x5c, 0xa9, 0xa3, 0x57, 0x62, 0xad, 0x9c, 0x52, 0x67, 0xb2, 0x96, 0x4d, 0x6d, 0xb4, 0x8d, 0x49, 
    0x74, 0xb4, 0x84, 0x45, 0x7b, 0xb5, 0x7b, 0x46, 0x85, 0xb6, 0x75, 0x48, 0x8b, 0xb7, 0x6e, 0x4b, 
    0x93, 0xb3, 0x68, 0x4d, 0x9b, 0xaf, 0x62, 0x52, 0xa1, 0xaa, 0x5c, 0x58, 0xa6, 0xa5, 0x57, 0x60, 
    0xac, 0xa0, 0x53, 0x65, 0xb1, 0x97, 0x4f, 0x6e, 0xb5, 0x8f, 0x4d, 0x76, 0xb8, 0x88, 0x4b, 0x7f, 
    0xba, 0x80, 0x4b, 0x87, 0xb9, 0x78, 0x47, 0x8e, 0xb8, 0x6e, 0x48, 0x97, 0xb7, 0x67, 0x4c, 0x9e, 
    0xb1, 0x5e, 0x4f, 0xa3, 0xad, 0x58, 0x55, 0xaa, 0xa9, 0x53, 0x5a, 0xae, 0xa1, 0x4c, 0x60, 0xb3, 
    0x9a, 0x4a, 0x67, 0xb4, 0x93, 0x47, 0x6f, 0xb7, 0x8b, 0x46, 0x77, 0xb9, 0x84, 0x48, 0x80, 0xbc, 
    0x7e, 0x48, 0x8b, 0xba, 0x75, 0x4a, 0x92, 0xb8, 0x6b, 0x4d, 0x9a, 0xb3, 0x63, 0x50, 0xa2, 0xae, 
    0x5b, 0x54, 0xa6, 0xa9, 0x54, 0x5b, 0xaf, 0xa0, 0x4d, 0x62, 0xb3, 0x97, 0x48, 0x6a, 0xb6, 0x8e, 
    0x45, 0x72, 0xb9, 0x85, 0x44, 0x7b, 0xbb, 0x7e, 0x45, 0x85, 0xba, 0x77, 0x46, 0x8e, 0xb9, 0x6f, 
    0x48, 0x95, 0xb5, 0x66, 0x4c, 0x9e, 0xb0, 0x5f, 0x52, 0xa3, 0xab, 0x5b, 0x58, 0xa9, 0xa5, 0x55, 
    0x5f, 0xaf, 0x9e, 0x53, 0x65, 0xb1, 0x96, 0x4f, 0x6e, 0xb4, 0x91, 0x4d, 0x78, 0xb6, 0x8a, 0x4d, 
    0x82, 0xb8, 0x7e, 0x4f, 0x8b, 0xb7, 0x76, 0x50, 0x91, 0xb3, 0x6d, 0x4e, 0x99, 0xb1, 0x65, 0x4e, 
    0x9d, 0xaa, 0x5b, 0x54, 0xa3, 0xa5, 0x55, 0x59, 0xa9, 0x9e, 0x51, 0x62, 0xaf, 0x97, 0x4c, 0x69, 
    0xb1, 0x8f, 0x49, 0x70, 0xb6, 0x88, 0x49, 0x7c, 0xb6, 0x81, 0x49, 0x84, 0xb7, 0x78, 0x48, 0x8b, 
    0xb6, 0x70, 0x4a, 0x94, 0xb4, 0x6a, 0x4d, 0x9b, 0xb2, 0x63, 0x51, 0xa4, 0xad, 0x59, 0x57, 0xaa, 
    0xa4, 0x53, 0x5f, 0xad, 0x9e, 0x4e, 0x64, 0xb4, 0x96, 0x4a, 0x70, 0xb6, 0x8f, 0x49, 0x7a, 0xb7, 
    0x88, 0x46, 0x82, 0xb9, 0x82, 0x45, 0x84, 0xb5, 0x7e, 0x59, 0x75, 0xaf, 0x7d, 0x62, 0x6f, 0x9d, 
    0x88, 0x66, 0x79, 0x8b, 0x8a, 0x6e, 0x7c, 0x84, 0x85, 0x74, 0x82, 0x83, 0x7a, 0x7b, 0x83, 0x82, 
    0x74, 0x7d, 0x87, 0x82, 0x74, 0x7d, 0x8a, 0x83, 0x77, 0x7d, 0x89, 0x86, 0x78, 0x7c, 0x87, 0x88, 
    0x7b, 0x7b, 0x86, 0x88, 0x7c, 0x7a, 0x87, 0x86, 0x7d, 0x7a, 0x87, 0x84, 0x7a, 0x7b, 0x86, 0x85, 
    0x79, 0x7c, 0x85, 0x81, 0x78, 0x7c, 0x83, 0x81, 0x77, 0x7b, 0x84, 0x80, 0x78, 0x7d, 0x86, 0x81, 
    0x79, 0x7f, 0x88, 0x83, 0x79, 0x83, 0x88, 0x82, 0x79, 0x83, 0x8a, 0x81, 0x79, 0x82, 0x8b, 0x7b, 
    0x7b, 0x83, 0x89, 0x7b, 0x7b, 0x86, 0x87, 0x7b, 0x7a, 0x89, 0x87, 0x7c, 0x7d, 0x89, 0x85, 0x7a, 
    0x7d, 0x88, 0x83, 0x7a, 0x7f, 0x88, 0x7f, 0x78, 0x81, 0x87, 0x7e, 0x79, 0x86, 0x86, 0x7c, 0x7a, 
    0x86, 0x87, 0x79, 0x7b, 0x88, 0x85, 0x79, 0x7f, 0x8a, 0x82, 0x78, 0x81, 0x8c, 0x83, 0x77, 0x83, 
    0x8d, 0x81, 0x77, 0x85, 0x8e, 0x7d, 0x75, 0x84, 0x8e, 0x7a, 0x74, 0x86, 0x8d, 0x7a, 0x74, 0x89, 
    0x8e, 0x7a, 0x74, 0x8b, 0x8d, 0x79, 0x75, 0x8c, 0x8d, 0x76, 0x79, 0x8c, 0x8c, 0x76, 0x78, 0x8e, 
    0x8a, 0x75, 0x7a, 0x8f, 0x88, 0x74, 0x7c, 0x90, 0x85, 0x72, 0x7f, 0x91, 0x83, 0x72, 0x81, 0x92, 
    0x82, 0x70, 0x82, 0x91, 0x80, 0x70, 0x83, 0x91, 0x7d, 0x72, 0x86, 0x91, 0x7c, 0x71, 0x86, 0x90, 
    0x7a, 0x72, 0x89, 0x8f, 0x77, 0x74, 0x8b, 0x8d, 0x76, 0x76, 0x8d, 0x8b, 0x77, 0x78, 0x8f, 0x87, 
    0x75, 0x7c, 0x8e, 0x85, 0x74, 0x7e, 0x8d, 0x82, 0x73, 0x80, 0x8c, 0x80, 0x72, 0x80, 0x8b, 0x7e, 
    0x73, 0x81, 0x8d, 0x7d, 0x74, 0x82, 0x8c, 0x7a, 0x76, 0x86, 0x8b, 0x7a, 0x77, 0x88, 0x89, 0x7a, 
    0x79, 0x8b, 0x87, 0x77, 0x7b, 0x89, 0x85, 0x76, 0x7c, 0x8b, 0x83, 0x75, 0x7d, 0x8c, 0x82, 0x76, 
    0x7f, 0x8e, 0x81, 0x74, 0x80, 0x8c, 0x80, 0x73, 0x82, 0x8b, 0x80, 0x73, 0x83, 0x8b, 0x7c, 0x74, 
    0x81, 0x87, 0x7c, 0x77, 0x81, 0x87, 0x7c, 0x7a, 0x82, 0x84, 0x7b, 0x7a, 0x80, 0x81, 0x7a, 0x7a, 
    0x82, 0x7f, 0x7c, 0x7d, 0x83, 0x80, 0x7c, 0x7f, 0x82, 0x80, 0x7c, 0x81, 0x83, 0x7f, 0x7c, 0x81, 
    0x83, 0x7d, 0x7d, 0x81, 0x82, 0x7d, 0x7d, 0x81, 0x81, 0x7b, 0x7c, 0x82, 0x81, 0x7c, 0x7d, 0x83, 
    0x82, 0x7d, 0x80, 0x83, 0x81, 0x7b, 0x80, 0x83, 0x80, 0x7c, 0x80, 0x82, 0x7e, 0x7c, 0x80, 0x81, 
    0x7b, 0x7b, 0x80, 0x81, 0x7b, 0x7c, 0x7f, 0x80, 0x7b, 0x7b, 0x80, 0x80, 0x7b, 0x7c, 0x81, 0x80, 
    0x7d, 0x7d, 0x83, 0x80, 0x7c, 0x7d, 0x83, 0x80, 0x7c, 0x80, 0x83, 0x81, 0x7c, 0x80, 0x82, 0x7f, 
    0x7d, 0x82, 0x84, 0x7e, 0x7c, 0x80, 0x83, 0x7d, 0x7c, 0x80, 0x84, 0x7d, 0x7c, 0x82, 0x84, 0x7e, 
    0x7c, 0x83, 0x83, 0x7c, 0x7c, 0x83, 0x83, 0x7c, 0x7c, 0x83, 0x83, 0x7b, 0x7d, 0x84, 0x83, 0x7a, 
    0x7c, 0x85, 0x82, 0x7a, 0x7c, 0x85, 0x80, 0x77, 0x7c, 0x84, 0x81, 0x78, 0x7d, 0x87, 0x80, 0x78, 
    0x7e, 0x86, 0x7f, 0x78, 0x80, 0x87, 0x7f, 0x79, 0x83, 0x88, 0x7e, 0x7a, 0x83, 0x87, 0x7e, 0x7b, 
    0x85, 0x87, 0x7f, 0x7c, 0x85, 0x87, 0x7f, 0x7d, 0x88, 0x88, 0x7e, 0x7f, 0x87, 0x86, 0x7c, 0x7e, 
    0x88, 0x85, 0x7b, 0x7f, 0x87, 0x83, 0x7b, 0x7e, 0x85, 0x81, 0x7a, 0x7e, 0x85, 0x7f, 0x79, 0x7e, 
    0x86, 0x80, 0x79, 0x80, 0x87, 0x7e, 0x7a, 0x82, 0x86, 0x7d, 0x79, 0x81, 0x86, 0x7c, 0x78, 0x83, 
    0x83, 0x7b, 0x7a, 0x85, 0x86, 0x7e, 0x7d, 0x87, 0x87, 0x7d, 0x7e, 0x87, 0x85, 0x7d, 0x7e, 0x86, 
    0x83, 0x7d, 0x7e, 0x87, 0x82, 0x7c, 0x80, 0x87, 0x82, 0x7b, 0x81, 0x85, 0x81, 0x7b, 0x81, 0x85, 
    0x80, 0x7c, 0x82, 0x86, 0x80, 0x7f, 0x85, 0x87, 0x80, 0x7d, 0x85, 0x87, 0x7f, 0x7f, 0x85, 0x85, 
    0x80, 0x7f, 0x85, 0x83, 0x7f, 0x7f, 0x84, 0x81, 0x7d, 0x7e, 0x82, 0x80, 0x7d, 0x80, 0x82, 0x7f, 
    0x7c, 0x7f, 0x81, 0x7f, 0x7d, 0x80, 0x82, 0x80, 0x7f, 0x82, 0x83, 0x80, 0x81, 0x84, 0x85, 0x80, 
    0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10, 0x00, 
};

void AlarmStateBeep()
{
    if(debugStates) printf("AlarmStateBeep\n");
    alarmStepTimer = StartTimer(5);
    if(debugTimers) printf("alarmStepTimer = %d\n", alarmStepTimer);
    beepClip = PlayClip(timerBeep_bytes, sizeof(timerBeep_bytes));
    alarmStateStep = ALARM_BEEP;
}

void AlarmStateQuiet()
{
    if(debugStates) printf("AlarmStatQuiet\n");
    alarmStepTimer = StartTimer(5);
    if(debugTimers) printf("alarmStepTimer = %d\n", alarmStepTimer);
    alarmStateStep = ALARM_QUIET;
}

void UpdateAlarmState()
{
    if(alarmStateStep == ALARM_BEEP) {
        DisplayTimeRemaining(0);
    } else if(alarmStateStep == ALARM_QUIET) {
        DisplayString("--:--");
    }
}

void EnterAlarmState()
{
    if(debugStates) printf("EnterAlarmState\n");
    appState = STATE_ALARM;
    alarmTimer = StartTimer(alarmToWaitingDuration);
    if(debugTimers) printf("alarmTimer = %d\n", alarmTimer);
    AlarmStateBeep();
}

void ExitAlarmState()
{
    CancelClip(beepClip); beepClip = -1;
    CancelTimer(alarmTimer); alarmTimer = -1;
    CancelTimer(alarmStepTimer); alarmStepTimer = -1;
}


// ----------------------------------------------------------------------------
// Event transitions and state handling

void DarkStateEvent(const Event &e)
{
    switch(e.type) {
        case INIT: /* not reached */ break;
        case SHORT_PRESS: {
            EnterWaitingState();
            break;
        }
        case LONG_PRESS: {
            EnterWaitingState();
            break;
        }
        case TIMER_FINISHED: {
            abort();
            break;
        }
        case TIMER_TICK: {
            abort();
            break;
        }
        case CLIP_FINISHED: {
            abort();
            break;
        }
    }
}

void WaitingStateEvent(const Event &e)
{
    switch(e.type) {
        case INIT: /* not reached */ break;
        case SHORT_PRESS: {
            CancelTimer(waitingTimer); waitingTimer = -1;
            if(e.data == BUTTON_1) {
                EnterRunningState(button1TimerDuration);
                UpdateRunningState();
            } else if(e.data == BUTTON_2) {
                EnterRunningState(button2TimerDuration);
                UpdateRunningState();
            } else if(e.data == (BUTTON_1 | BUTTON_2)) {
                EnterStatusState();
            }
            break;
        }
        case LONG_PRESS: {
            if(e.data == BUTTON_1) {
                ExitWaitingState();
                EnterEditState(0);
                UpdateEditState();
            } else if(e.data == BUTTON_2) {
                ExitWaitingState();
                EnterEditState(1);
                UpdateEditState();
            } else if(e.data == (BUTTON_1 | BUTTON_2)) {
                ExitWaitingState();
                EnterDarkState();
            }
            break;
        }
        case TIMER_FINISHED: {
            waitingTimer = -1;
            EnterDarkState();
            break;
        }
        case TIMER_TICK: {
            UpdateWaitingState();
            break;
        }
        case CLIP_FINISHED: {
            break;
        }
    }
}

void StatusStateEvent(const Event &e)
{
    switch(e.type) {
        case INIT: /* not reached */ break;
        case SHORT_PRESS: {
            EnterWaitingState();
            break;
        }
        case LONG_PRESS: {
            EnterWaitingState();
            break;
        }
        case TIMER_FINISHED: {
            EnterWaitingState();
            break;
        }
        case TIMER_TICK: {
            UpdateStatusState();
            break;
        }
        case CLIP_FINISHED: {
            break;
        }
    }
}

void EditStateEvent(const Event &e)
{
    switch(e.type) {
        case INIT: /* not reached */ break;
        case SHORT_PRESS: {
            if(e.data == BUTTON_1) {
                if(customTimerDuration > 50) {
                    customTimerDuration -= 50;
                    // XXX Could have a ResetTimer() function
                    CancelTimer(editWaitTimer); editWaitTimer = -1;
                    editWaitTimer = StartTimer(editToWaitingDuration);
                    DrawRect(timeDisplayArea.left, timeDisplayArea.top, timeDisplayArea.width, timeDisplayArea.height, Color(0, 0, 0));
                    UpdateEditState();
                }
            } else if(e.data == BUTTON_2) {
                customTimerDuration += 50;
                CancelTimer(editWaitTimer); editWaitTimer = -1;
                editWaitTimer = StartTimer(editToWaitingDuration);
                DrawRect(timeDisplayArea.left, timeDisplayArea.top, timeDisplayArea.width, timeDisplayArea.height, Color(0, 0, 0));
                UpdateEditState();
            } else {
                ExitEditState();
                EnterWaitingState();
            }
            break;
        }
        case LONG_PRESS: {
            if((e.data == BUTTON_1) || (e.data == BUTTON_2)) {
                ExitEditState();
                EnterRunningState(customTimerDuration);
            } else {
                ExitEditState();
                EnterDarkState();
            }
            break;
        }
        case TIMER_FINISHED: {
            ExitEditState();
            EnterWaitingState();
            break;
        }
        case TIMER_TICK: {
            UpdateEditState();
            break;
        }
        case CLIP_FINISHED: {
            break;
        }
    }
}

void RunningStateEvent(const Event &e)
{
    switch(e.type) {
        case INIT: /* not reached */ break;
        case SHORT_PRESS: {
            EnterPausedState();
            break;
        }
        case LONG_PRESS: {
            if((e.data == BUTTON_1) || (e.data == BUTTON_2)) {
                ExitRunningState();
                EnterWaitingState();
            } else {
                ExitRunningState();
                EnterDarkState();
            }
            break;
        }
        case TIMER_FINISHED: {
            ExitRunningState();
            EnterAlarmState();
            break;
        }
        case TIMER_TICK: {
            UpdateRunningState();
            break;
        }
        case CLIP_FINISHED: {
            break;
        }
    }
}

void PausedStateEvent(const Event &e)
{
    switch(e.type) {
        case INIT: /* not reached */ break;
        case SHORT_PRESS: {
            ResumeRunningFromPaused();
            UpdateRunningState();
            break;
        }
        case LONG_PRESS: {
            if((e.data == BUTTON_1) || (e.data == BUTTON_2)) {
                ExitPausedState();
                EnterWaitingState();
            } else {
                ExitPausedState();
                EnterDarkState();
            }
            break;
        }
        case TIMER_FINISHED: {
            ExitPausedState();
            EnterWaitingState();
            break;
        }
        case TIMER_TICK: {
            UpdatePausedState();
            break;
        }
        case CLIP_FINISHED: {
            break;
        }
    }
}

void AlarmStateEvent(const Event &e)
{
    switch(e.type) {
        case INIT: /* not reached */ break;
        case SHORT_PRESS: {
            ExitAlarmState();
            EnterWaitingState();
            break;
        }
        case LONG_PRESS: {
            if((e.data == BUTTON_1) || (e.data == BUTTON_2)) {
                ExitAlarmState();
                EnterRunningState((e.data == BUTTON_1) ? button1TimerDuration : button2TimerDuration);
            } else {
                ExitAlarmState();
                EnterDarkState();
            }
            break;
        }
        case TIMER_FINISHED: {
            if(e.data == alarmTimer) {
                ExitAlarmState();
                EnterWaitingState();
            } else if(e.data == alarmStepTimer) {
                if(alarmStateStep == ALARM_BEEP) {
                    AlarmStateQuiet();
                } else if(alarmStateStep == ALARM_QUIET) {
                    AlarmStateBeep();
                }
                UpdateAlarmState();
            }
            break;
        }
        case TIMER_TICK: {
            UpdateAlarmState();
            break;
        }
        case CLIP_FINISHED: {
            beepClip = -1;
            break;
        }
    }
}

int HandleEvent(const Event& e)
{
    if(e.type == INIT) {
        DrawRect(0, 0, 128, 128, Color(0, 0, 0));
        EnterWaitingState();
    } else {
        if(debugEvents) {
            printf("Event %d, data %d, state %d\n", e.type, e.data, appState);
        }
        switch(appState) {
            case STATE_DARK: DarkStateEvent(e); break;
            case STATE_WAITING: WaitingStateEvent(e); break;
            case STATE_EDIT: EditStateEvent(e); break;
            case STATE_STATUS: StatusStateEvent(e); break;
            case STATE_RUNNING: RunningStateEvent(e); break;
            case STATE_PAUSED: PausedStateEvent(e); break;
            case STATE_ALARM: AlarmStateEvent(e); break;
        }
    }
    return 0;
}
